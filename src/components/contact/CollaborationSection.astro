---
type Props = ContactCollaborationSection;

import type { ContactCollaborationSection } from "../../../sanity.types";
import { mapInputTypeToInputComponent } from "../../lib/inputType";

const {
  formButtonText,
  formInputs,
  formSubTitle,
  formTitle,
  text,
  title,
  subTitle,
} = Astro.props;
---

<section>
  <div class="content-wrapper">
    <div class="info-wrapper">
      <h3>{title}</h3>
      <h4>{subTitle}</h4>
      <div class="steps-wrapper">
        {
          text.map((paragraph, index) => {
            return (
              <div>
                <span>{index + 1}</span>
                <p>{paragraph}</p>
              </div>
            );
          })
        }
      </div>
    </div>

    <div class="form-wrapper">
      <div class="form-header">
        <p>{formTitle}</p>
        <p>{formSubTitle}</p>
      </div>
      <!-- @ts-expect-error - Netlify form attributes -->
      <form
        netlify
        netlify-honeypot="bot-field"
        name="collaboration"
        method="POST"
        action="/success"
      >
        <!-- Honeypot field for spam protection - hidden from users -->
        <p style="display: none;">
          <label>
            Don't fill this out if you're human: <input name="bot-field" />
          </label>
        </p>
        {
          formInputs.map((formInput) => {
            const Component = mapInputTypeToInputComponent(formInput.type);

            return Component ? (
              <Component {...formInput} key={formInput._key} />
            ) : null;
          })
        }
        <button type="submit" id="submit-btn">{formButtonText}</button>
      </form>
    </div>
  </div>

  <style>
    h3 {
      margin-bottom: 1rem;
    }
    h4 {
      margin-bottom: 5rem;
    }
    .content-wrapper {
      display: flex;
      max-width: var(--section-max-width);
      margin: 0 auto;
      gap: 5rem;
    }
    .info-wrapper {
      flex: 1;
    }
    .form-wrapper {
      flex: 1;
      border-radius: var(--section-img-border-radius);
      background-color: var(--primary-color-transparent);
      -webkit-box-shadow: 0px 10px 20px 0px rgba(0, 0, 0, 0.25);
      -moz-box-shadow: 0px 10px 20px 0px rgba(0, 0, 0, 0.25);
      box-shadow: 0px 10px 20px 0px rgba(0, 0, 0, 0.25);
    }
    .form-header {
      border-radius: var(--section-img-border-radius);
      background-color: var(--primary-color);
      padding: 2rem 0;
    }
    .form-header > p {
      text-align: center;
      color: var(--text-color-invert);
    }
    .form-header p:first-child {
      font-size: calc(1.5 * var(--font-size-text));
      margin-bottom: 1rem;
    }
    .form-header p:last-child {
      font-size: calc(1.25 * var(--font-size-text));
    }
    form {
      display: flex;
      flex-direction: column;
      align-items: flex-end;
      padding: 2rem 1.5rem;
      gap: 2rem;
    }
    button {
      font-weight: 500;
      padding: var(--button-padding);
      border: none;
      border-radius: var(--button-border-radius);
      font-size: var(--button-font-size);
      -webkit-box-shadow: 8px 11px 6px 0px rgba(0, 0, 0, 0.25);
      -moz-box-shadow: 8px 11px 6px 0px rgba(0, 0, 0, 0.25);
      box-shadow: 8px 11px 6px 0px rgba(0, 0, 0, 0.25);
      width: fit-content;
      cursor: pointer;
    }
    .steps-wrapper {
      display: flex;
      flex-direction: column;
      gap: 5rem;
    }
    .steps-wrapper p {
      line-height: var(--section-paragraph-interline);
    }
    .steps-wrapper > div {
      display: flex;
      gap: 2rem;
    }
    .steps-wrapper > div > span {
      color: var(--primary-color);
      font-size: calc(3 * var(--font-size-text));
      font-weight: bold;
      min-width: 2rem;
    }

    @media only screen and (max-width: 1200px) {
      .form-header {
        padding: 2rem 1rem;
      }
      h4 {
        margin-bottom: 4rem;
      }
    }
    @media only screen and (max-width: 768px) {
      h3 {
        margin: 1rem 0;
        text-align: center;
      }
      h4 {
        margin-bottom: 3rem;
        text-align: center;
      }
      .form-header p:first-child {
        font-size: calc(1.25 * var(--font-size-text));
      }
      .form-header p:last-child {
        font-size: calc(1 * var(--font-size-text));
      }
    }
    @media only screen and (max-width: 485px) {
      h4 {
        margin-bottom: 2rem;
      }
      .form-header p:first-child {
        font-size: calc(1 * var(--font-size-text));
      }
      .form-header p:last-child {
        font-size: calc(0.9 * var(--font-size-text));
      }
    }
  </style>
</section>
