---
import type { GetProjectBySlugQueryResult } from "../../../../sanity.types";
import { urlForImage } from "../../../lib/urlForImage";
import { getImageDimensions } from "../../../lib/getImageDimensions";

interface Props {
  gallery: GetProjectBySlugQueryResult[number]["gallery"];
}
const { gallery } = Astro.props;

const sliderLenght = gallery?.length;
---

<section>
  <div class="slider-wrapper">
    <div class="slider">
      {
        gallery
          ?.filter((img) => img?.asset?._ref)
          .map((image) => (
            <div class="image-wrapper">
              <img
                src={urlForImage(image.asset).url()}
                width={getImageDimensions(image).width}
                height={getImageDimensions(image).height}
                alt={image.alt}
                loading="lazy"
                decoding="async"
              />
            </div>
          ))
      }
    </div>
    <button class="prev-button" aria-label="Poprzedni następny obrazek">
      <img
        src="/icons/arrow_previous.svg"
        alt="Poprzedni następny obrazek"
      /></button
    >
    <button class="next-button" aria-label="Przycisk następny obrazek">
      <img
        src="/icons/arrow_next.svg"
        alt="Przycisk następny obrazek"
      /></button
    >
  </div>
  <!-- Carousel Controlls -->
  <div
    class="slider-controlls"
    role="group"
    aria-label="Nawigacja dla przycisków karuzeli"
  >
    {
      Array.from({ length: sliderLenght }).map((_, index) => (
        <div
          class={index === 0 ? "controll-dot dot-current" : "controll-dot"}
          data-index={index}
          role="button"
          aria-label={`Przejdź do obrazka nr ${index + 1}`}
        />
      ))
    }
  </div>
  <!-- Overlay for preview -->
  <div class="image-popup-overlay">
    <div class="image-popup-content">
      <img src="" alt="Pop-up image" class="popup-image" />
      <button class="close-popup-button"
        ><img src="/icons/close.svg" alt="close button" /></button
      >
    </div>
  </div>
</section>

<style>
  section {
    padding: 0;
    position: relative;
    -webkit-box-shadow: 0px 10px 20px 0px rgba(0, 0, 0, 0.25);
    -moz-box-shadow: 0px 10px 20px 0px rgba(0, 0, 0, 0.25);
    box-shadow: 0px 10px 20px 0px rgba(0, 0, 0, 0.25);
  }
  .slider-wrapper {
    position: relative;
    width: 100%;
    background-color: var(--background-color);
    overflow: hidden;
    aspect-ratio: 16/9;
    max-height: calc(100vh - var(--nav-height));
    max-height: calc(100dvh - var(--nav-height));
  }
  .slider {
    display: flex;
    transition: 1s ease transform;
    height: 100%;
  }
  .image-wrapper {
    min-width: 100%;
    height: auto;
  }
  .image-wrapper:nth-child(2n) {
    background-color: var(--card-background-color);
  }
  .image-wrapper > img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transform-origin: center center;
  }

  .next-button,
  .prev-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    right: 100px;
    width: 64px;
    height: 64px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: rgba(255, 255, 255, 0.7);
    cursor: pointer;
    border: none;
    transition: 0.2s ease background-color;
    border-radius: 50%;
  }
  .prev-button {
    right: unset;
    left: 100px;
  }
  .next-button:hover,
  .prev-button:hover {
    background-color: rgba(255, 255, 255, 0.6);
  }
  .slider-controlls {
    position: absolute;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    bottom: 100px;
    left: 50%;
    transform: translateX(-50%);
    padding: 0.75rem;
    background-color: rgba(255, 255, 255, 0.7);
    border-radius: 10rem;
  }
  .controll-dot {
    width: 10px;
    height: 10px;
    background-color: var(--text-color);
    border-radius: 50%;
    cursor: pointer;
    transition:
      0.3s ease height,
      0.3s ease width;
  }
  .dot-current {
    cursor: default;
    height: 18px;
    width: 18px;
    background-color: #ffffff;
    border: 4px solid var(--primary-color);
  }
  .image-popup-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(5px);
    -webkit-backdrop-filter: blur(5px);
    z-index: 1000;
    justify-content: center;
    align-items: center;
  }

  .image-popup-content {
    position: relative;
    max-width: 90%;
    height: auto;
    max-height: 100vh;
    max-height: 100dvh;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .popup-image {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  .close-popup-button {
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 60px;
    height: 60px;
    background-color: rgba(0, 0, 0, 0.8);
    border-radius: 50%;
    top: 20px;
    right: 20px;
    border: none;
    cursor: pointer;
    transition: 0.2s ease background-color;
  }
  .close-popup-button:hover {
    background-color: rgba(0, 0, 0, 1);
  }

  /* Disbale website scrolling on image preview */
  html.no-scroll,
  body.no-scroll {
    overflow: hidden;
  }
  @media only screen and (max-width: 1200px) {
    .next-button {
      right: 50px;
    }
    .prev-button {
      left: 50px;
    }
    .slider-controlls {
      bottom: 50px;
    }
  }
  @media only screen and (max-width: 768px) {
    .next-button {
      right: 25px;
    }
    .prev-button {
      left: 25px;
    }
    .slider-controlls {
      bottom: 25px;
    }
  }
  @media only screen and (max-width: 485px) {
    section {
      position: relative;
    }
    .slider-wrapper {
      overflow-x: scroll; /* Enable horizontal scrolling */
      scroll-snap-type: x mandatory; /* Enable scroll snapping */
      -webkit-overflow-scrolling: touch; /* Smooth scrolling for iOS */
      scrollbar-width: none; /* Hide scrollbar for Firefox */
    }
    .slider-wrapper::-webkit-scrollbar {
      display: none; /* Hide scrollbar for Chrome, Safari, Opera */
    }
    .slider {
      transition: none; /* Disable transition on transform for native scrolling */
      transform: none !important; /* Disable transform for native scrolling */
    }
    .image-wrapper {
      scroll-snap-align: start; /* Snap each image to the start */
    }
    .next-button,
    .prev-button {
      display: none; /*Hide buttons for touch navigation */
      top: unset;
      bottom: 16px;
      transform: translateY(0);
      height: 32px;
      width: 32px;
    }
    /* .next-button > img,
    .prev-button > img {
      height: 24px;
      width: 24px;
    }
    .next-button {
      right: 16px;
    }
    .prev-button {
      left: 16px;
    } */
    /* .desktop-only {
      display: none;
    }
    .mobile-only {
      display: flex;
    } */
    .slider-controlls {
      padding: 0.25rem;
      bottom: 24px;
      z-index: 11;
    }
    .controll-dot {
      height: 8px;
      width: 8px;
    }
    .close-popup-button {
      width: 40px;
      height: 40px;

      top: 10px;
      right: 10px;
    }
    .close-popup-button > img {
      width: 32px;
      height: 32px;
    }
  }
</style>

<script is:inline>
  const slider = document.querySelector(".slider");
  const imageWrappers = document.querySelectorAll(".image-wrapper");
  const prevButton = document.querySelector(".prev-button");
  const nextButton = document.querySelector(".next-button");
  const sliderWrapper = document.querySelector(".slider-wrapper"); // Get slider-wrapper
  const imagePopupOverlay = document.querySelector(".image-popup-overlay");
  const popupImage = document.querySelector(".popup-image");
  const closePopupButton = document.querySelector(".close-popup-button");

  let currentIndex = 0;

  function showSlide(index) {
    const isMobile = window.innerWidth <= 485;
    if (isMobile && sliderWrapper) {
      // For mobile, use scrollLeft for native scrolling
      sliderWrapper.scrollLeft = index * sliderWrapper.offsetWidth;
    } else if (slider) {
      // For larger screens, use transform as before
      slider.style.transform = `translateX(${-index * 100}%)`;
    }
    const dots = document.querySelectorAll(".controll-dot");
    dots.forEach((dot, i) => {
      if (i === index) {
        dot.classList.add("dot-current");
      } else {
        dot.classList.remove("dot-current");
      }
    });
  }

  function nextSlide() {
    currentIndex = (currentIndex + 1) % imageWrappers.length;
    showSlide(currentIndex);
  }

  function prevSlide() {
    currentIndex =
      (currentIndex - 1 + imageWrappers.length) % imageWrappers.length;
    showSlide(currentIndex);
  }

  const controllDots = document.querySelectorAll(".controll-dot");
  controllDots.forEach((dot) => {
    dot.addEventListener("click", () => {
      currentIndex = parseInt(dot.dataset.index);
      showSlide(currentIndex);
    });
  });

  imageWrappers.forEach((wrapper) => {
    wrapper.addEventListener("click", (event) => {
      const clickedImageSrc = event.target.src;
      if (clickedImageSrc) {
        popupImage.src = clickedImageSrc;
        imagePopupOverlay.style.display = "flex";
        document.body.classList.add("no-scroll");
        document.documentElement.classList.add("no-scroll"); // Add to html element
      }
    });
  });

  closePopupButton.addEventListener("click", () => {
    imagePopupOverlay.style.display = "none";
    document.body.classList.remove("no-scroll");
    document.documentElement.classList.remove("no-scroll"); // Remove from html element
  });

  imagePopupOverlay.addEventListener("click", (event) => {
    if (event.target === imagePopupOverlay) {
      imagePopupOverlay.style.display = "none";
      document.body.classList.remove("no-scroll");
      document.documentElement.classList.remove("no-scroll"); // Remove from html element
    }
  });

  // Conditionally remove event listeners for next/prev buttons
  if (window.innerWidth <= 485) {
    nextButton.removeEventListener("click", nextSlide);
    prevButton.removeEventListener("click", prevSlide);
    if (sliderWrapper) {
      sliderWrapper.addEventListener("scrollend", () => {
        currentIndex = Math.round(
          sliderWrapper.scrollLeft / sliderWrapper.offsetWidth,
        );
        showSlide(currentIndex);
      });
    }
  } else {
    nextButton.addEventListener("click", nextSlide);
    prevButton.addEventListener("click", prevSlide);
  }

  // Initialize slider
  showSlide(currentIndex);
</script>
