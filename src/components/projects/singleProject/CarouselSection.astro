---
import type { GetProjectBySlugQueryResult } from "../../../../sanity.types";
import { urlForImage } from "../../../lib/urlForImage";
import { getImageDimensions } from "../../../lib/getImageDimensions";

interface Props {
  gallery: GetProjectBySlugQueryResult[number]["gallery"];
}
const { gallery } = Astro.props;

const sliderLenght = gallery?.length;
---

<section>
  <div class="slider-wrapper">
    <div class="slider">
      {
        gallery
          ?.filter((img) => img?.asset?._ref)
          .map((image) => (
            <div class="image-wrapper">
              <img
                src={urlForImage(image.asset).url()}
                width={getImageDimensions(image).width}
                height={getImageDimensions(image).height}
                alt={image.alt}
                loading="lazy"
                decoding="async"
              />
            </div>
          ))
      }
    </div>
    <button id="prev-btn" class="prev-button" aria-label="Poprzedni obrazek">
      <img src="/icons/arrow_previous.svg" alt="Poprzedni obrazek" />
    </button>
    <button id="next-btn" class="next-button" aria-label="NastÄ™pny obrazek">
      <img src="/icons/arrow_next.svg" alt="NastÄ™pny obrazek" />
    </button>
  </div>
  <!-- Carousel Controlls -->
  <div class="slider-controlls" role="group" aria-label="Nawigacja dla przyciskÃ³w karuzeli">
    {
      Array.from({ length: sliderLenght }).map((_, index) => (
        <div
          class={index === 0 ? "controll-dot dot-current" : "controll-dot"}
          data-index={index}
          role="button"
          tabindex="0"
          aria-label={`PrzejdÅº do obrazka nr ${index + 1}`}
        />
      ))
    }
  </div>
  <!-- Overlay for preview -->
  <div class="image-popup-overlay">
    <div class="image-popup-content">
      <img src="" alt="Pop-up image" class="popup-image" />
    </div>
    <button class="close-popup-button"><img src="/icons/close.svg" alt="close button" /></button>
    <button id="prev-btn-overlay" class="prev-button" aria-label="Poprzedni obrazek">
      <img src="/icons/arrow_previous.svg" alt="Poprzedni obrazek" />
    </button>
    <button id="next-btn-overlay" class="next-button" aria-label="NastÄ™pny obrazek">
      <img src="/icons/arrow_next.svg" alt="NastÄ™pny obrazek" />
    </button>
    <div id="slide-tracker">
      <p>1 / {gallery?.length || 0}</p>
    </div>
  </div>
</section>

<style>
  section {
    padding: 0;
    position: relative;
    -webkit-box-shadow: 0px 10px 20px 0px rgba(0, 0, 0, 0.25);
    -moz-box-shadow: 0px 10px 20px 0px rgba(0, 0, 0, 0.25);
    box-shadow: 0px 10px 20px 0px rgba(0, 0, 0, 0.25);
  }
  .slider-wrapper {
    position: relative;
    width: 100%;
    background-color: var(--background-color);
    overflow: hidden;
    aspect-ratio: 16/9;
    max-height: calc(100vh - var(--nav-height) - 10vh);
    max-height: calc(100dvh - var(--nav-height) - 10vh);
    cursor: pointer;
  }
  .slider {
    display: flex;
    transition: 1s ease transform;
    height: 100%;
  }
  .image-wrapper {
    min-width: 100%;
    height: auto;
  }
  .image-wrapper:nth-child(2n) {
    background-color: var(--card-background-color);
  }
  .image-wrapper > img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transform-origin: center center;
  }

  .next-button,
  .prev-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    right: 100px;
    width: 64px;
    height: 64px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: rgba(255, 255, 255, 0.7);
    cursor: pointer;
    border: none;
    transition: 0.2s ease background-color;
    border-radius: 50%;
  }
  .prev-button {
    right: unset;
    left: 100px;
  }
  .next-button:hover,
  .prev-button:hover {
    background-color: rgba(255, 255, 255, 0.6);
  }
  .slider-controlls {
    position: absolute;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    bottom: 100px;
    left: 50%;
    transform: translateX(-50%);
    padding: 0.75rem;
    background-color: rgba(255, 255, 255, 0.7);
    border-radius: 10rem;
  }
  .controll-dot {
    width: 10px;
    height: 10px;
    background-color: var(--text-color);
    border-radius: 50%;
    cursor: pointer;
    transition:
      0.3s ease height,
      0.3s ease width;
  }
  .dot-current {
    cursor: default;
    height: 18px;
    width: 18px;
    background-color: #ffffff;
    border: 4px solid var(--primary-color);
  }
  .image-popup-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(5px);
    -webkit-backdrop-filter: blur(5px);
    z-index: 1000;
    justify-content: center;
    align-items: center;
  }

  .image-popup-content {
    position: relative;
    height: auto;
    max-width: 70%; /* Carousel IMAGE popup width */
    max-height: 80vh; /* Carousel IMAGE popup height */
    max-height: 80dvh; /* Carousel IMAGE popup height */
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .popup-image {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  .close-popup-button {
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 60px;
    height: 60px;
    background-color: rgba(255, 255, 255, 0.7);
    border-radius: 50%;
    top: 20px;
    right: 20px;
    border: none;
    cursor: pointer;
    transition: 0.2s ease background-color;
  }
  .close-popup-button > img,
  .image-popup-overlay > .next-button > img,
  .image-popup-overlay > .prev-button > img {
    filter: brightness(0) saturate(100%) invert(6%) sepia(0%) saturate(0%) hue-rotate(0deg) brightness(100%) contrast(100%);
  }
  .close-popup-button:hover {
    background-color: rgba(255, 255, 255, 0.6);
  }

  #prev-btn-overlay,
  #next-btn-overlay {
    z-index: 101;
  }

  #slide-tracker {
    position: absolute;
    display: flex;
    justify-content: center;
    width: 100%;
    bottom: 48px;
  }
  #slide-tracker > p {
    background-color: rgba(255, 255, 255, 0.7);
    padding: 1rem;
    border-radius: 10rem;
    color: var(--text-color);
    text-align: center;
    min-width: 76px;
  }

  /* Disbale website scrolling on image preview */
  html.no-scroll,
  body.no-scroll {
    overflow: hidden;
  }
  @media only screen and (max-width: 1200px) {
    .next-button {
      right: 50px;
    }
    .prev-button {
      left: 50px;
    }
    .slider-controlls {
      bottom: 50px;
    }
  }
  @media only screen and (max-width: 768px) {
    #prev-btn-overlay,
    #next-btn-overlay {
      transform: none;
      top: unset;
      bottom: 48px;
      right: 48px;
    }
    #prev-btn-overlay {
      right: unset;
      left: 48px;
    }
    .next-button {
      right: 25px;
    }
    .prev-button {
      left: 25px;
    }
    .slider-controlls {
      bottom: 25px;
    }
  }
  @media only screen and (max-width: 485px) {
    section {
      position: relative;
    }
    .slider-wrapper {
      overflow-x: scroll; /* Enable horizontal scrolling */
      scroll-snap-type: x mandatory; /* Enable scroll snapping */
      -webkit-overflow-scrolling: touch; /* Smooth scrolling for iOS */
      scrollbar-width: none; /* Hide scrollbar for Firefox */
    }
    .slider-wrapper::-webkit-scrollbar {
      display: none; /* Hide scrollbar for Chrome, Safari, Opera */
    }
    .slider {
      transition: none; /* Disable transition on transform for native scrolling */
      transform: none !important; /* Disable transform for native scrolling */
    }
    .image-wrapper {
      scroll-snap-align: start; /* Snap each image to the start */
    }
    #prev-btn,
    #next-btn {
      display: none; /*Hide buttons for touch navigation */
      top: unset;
      bottom: 16px;
      transform: translateY(0);
      height: 32px;
      width: 32px;
    }
    .slider-controlls {
      padding: 0.25rem;
      bottom: 24px;
      z-index: 11;
    }
    .controll-dot {
      height: 8px;
      width: 8px;
    }
    .close-popup-button {
      width: 40px;
      height: 40px;

      top: 16px;
      right: 16px;
    }
    .close-popup-button > img {
      width: 32px;
      height: 32px;
    }
  }
</style>

<script is:inline>
  const slider = document.querySelector(".slider");
  const imageWrappers = document.querySelectorAll(".image-wrapper");
  const prevButton = document.getElementById("prev-btn");
  const nextButton = document.getElementById("next-btn");
  const sliderWrapper = document.querySelector(".slider-wrapper"); // Get slider-wrapper
  const imagePopupOverlay = document.querySelector(".image-popup-overlay");
  const popupImage = document.querySelector(".popup-image");
  const closePopupButton = document.querySelector(".close-popup-button");
  const prevButtonOverlay = document.getElementById("prev-btn-overlay");
  const nextButtonOverlay = document.getElementById("next-btn-overlay");
  let currentPopupIndex = 0; // Index of image currently shown in popup
  const slideTracker = document.getElementById("slide-tracker");
  const totalSlides = imageWrappers.length;

  let currentIndex = 0;

  function showSlide(index) {
    if (totalSlides === 0) return;
    const isMobile = window.innerWidth <= 485;
    if (isMobile && sliderWrapper) {
      // For mobile, use scrollLeft for native scrolling
      sliderWrapper.scrollLeft = index * sliderWrapper.offsetWidth;
    } else if (slider) {
      // For larger screens, use transform as before
      slider.style.transform = `translateX(${-index * 100}%)`;
    }
    const dots = document.querySelectorAll(".controll-dot");
    dots.forEach((dot, i) => {
      if (i === index) {
        dot.classList.add("dot-current");
      } else {
        dot.classList.remove("dot-current");
      }
    });
    updateSlideTracker(index); // ðŸ”¸ Add this line
  }

  function nextSlide() {
    if (imageWrappers.length === 0) return;
    currentIndex = (currentIndex + 1) % imageWrappers.length;
    showSlide(currentIndex);
  }

  function prevSlide() {
    if (imageWrappers.length === 0) return;
    currentIndex = (currentIndex - 1 + imageWrappers.length) % imageWrappers.length;
    showSlide(currentIndex);
  }

  const controllDots = document.querySelectorAll(".controll-dot");

  controllDots.forEach((dot) => {
    const go = () => {
      currentIndex = parseInt(dot.dataset.index);
      showSlide(currentIndex);
    };
    dot.addEventListener("click", go);
    dot.addEventListener("keydown", (e) => {
      if (e.key === "Enter" || e.key === " ") {
        e.preventDefault();
        go();
      }
    });
  });

  imageWrappers.forEach((wrapper, index) => {
    wrapper.addEventListener("click", (event) => {
      const clickedImageSrc = event.target.src;
      if (clickedImageSrc) {
        currentPopupIndex = index;
        popupImage.src = clickedImageSrc;
        imagePopupOverlay.style.display = "flex";
        document.body.classList.add("no-scroll");
        document.documentElement.classList.add("no-scroll");
      }
    });
  });

  closePopupButton.addEventListener("click", () => {
    imagePopupOverlay.style.display = "none";
    document.body.classList.remove("no-scroll");
    document.documentElement.classList.remove("no-scroll"); // Remove from html element
  });

  imagePopupOverlay.addEventListener("click", (event) => {
    if (event.target === imagePopupOverlay) {
      imagePopupOverlay.style.display = "none";
      document.body.classList.remove("no-scroll");
      document.documentElement.classList.remove("no-scroll"); // Remove from html element
    }
  });

  // Conditionally remove event listeners for next/prev buttons
  if (window.innerWidth <= 485) {
    nextButton.removeEventListener("click", nextSlide);
    prevButton.removeEventListener("click", prevSlide);
    if (sliderWrapper) {
      const onScrollEnd = () => {
        currentIndex = Math.round(sliderWrapper.scrollLeft / sliderWrapper.offsetWidth);
        showSlide(currentIndex);
      };
      if ("onscrollend" in window) {
        sliderWrapper.addEventListener("scrollend", onScrollEnd);
      } else {
        let t;
        sliderWrapper.addEventListener(
          "scroll",
          () => {
            clearTimeout(t);
            t = setTimeout(onScrollEnd, 120);
          },
          { passive: true },
        );
      }
    }
  } else {
    nextButton.addEventListener("click", nextSlide);
    prevButton.addEventListener("click", prevSlide);
  }

  // Popup img preview
  function showPopupImage(index) {
    const newImage = imageWrappers[index].querySelector("img");
    if (newImage) {
      popupImage.src = newImage.src;
    }
    updateSlideTracker(index);
  }

  function nextPopupImage() {
    currentPopupIndex = (currentPopupIndex + 1) % imageWrappers.length;
    showPopupImage(currentPopupIndex);
  }

  function prevPopupImage() {
    currentPopupIndex = (currentPopupIndex - 1 + imageWrappers.length) % imageWrappers.length;
    showPopupImage(currentPopupIndex);
  }

  nextButtonOverlay.addEventListener("click", nextPopupImage);
  prevButtonOverlay.addEventListener("click", prevPopupImage);

  function updateSlideTracker(current) {
    if (slideTracker) {
      const visibleIndex = totalSlides > 0 && current >= 0 ? current + 1 : 0;
      slideTracker.querySelector("p").textContent = `${visibleIndex} / ${totalSlides}`;
    }
  }

  // Initialize slider
  showSlide(currentIndex);
</script>
