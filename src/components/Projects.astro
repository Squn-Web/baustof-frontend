---
interface Props {
  projects: GetLatestThreeProjectsQueryResult;
}

import TextButton from "./TextButton.astro";
import { formatDate } from "../lib/convertDate";
import type { GetLatestThreeProjectsQueryResult } from "../../sanity.types";
import DynamicImage from "./DynamicImage.astro";

const { projects } = Astro.props;
---

<div class="projects-wrapper">
  {
    projects.map((project) => {
      return (
        <div class="project-card">
          <DynamicImage className="project-img" image={project.image} />

          <div class="project-card-content">
            <h4 class="project-title">{project.title}</h4>
            <p class="project-type">zelbeton</p>

            <div class="categories-wrapper">
              {project.categories?.map((category) => (
                <p class="category-item">{category.slug.current}</p>
              ))}
            </div>

            <div class="project-meta">
              <div class="icon-wrapper">
                <img class="icon" src="/icons/calendar.svg" aria-hidden="true" />
                <p class="meta-item">{formatDate(project.startDate)}</p>
              </div>
              <div class="icon-wrapper">
                <img class="icon" src="/icons/location.svg" aria-hidden="true" />

                <p class="meta-item">{project.city}</p>
              </div>
            </div>
            <p class="project-description">{project.text}</p>
            <TextButton href={`/projects/${project.slug.current}`} text={project.actionButtonText} path="/icons/arrow_right.svg" />
          </div>
        </div>
      );
    })
  }
</div>

<style>
  .projects-wrapper {
    display: flex;
    width: 100%;
    gap: 2rem;
  }
  .project-card {
    display: flex;
    flex-direction: column;
    width: 100%;
    background-color: var(--card-background-color-light);
    border-radius: var(--section-img-border-radius);
  }
  .project-card-content {
    display: flex;
    flex-direction: column;
    padding: 2rem;
  }
  .project-title {
    margin-bottom: 0.5rem;
    line-height: 130%;
    font-weight: bold;
  }

  .project-type {
    font-size: calc(0.8 * var(--font-size-text));
    color: #515151;
    padding-bottom: 1rem;
  }
  .categories-wrapper {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    padding-bottom: 1rem;
  }

  .category-item {
    border: 2px solid var(--card-background-color);
    padding: 0.75rem;
    border-radius: 10rem;
    font-size: calc(0.7 * var(--font-size-text));
  }

  .project-meta {
    display: contents;
  }

  .project-meta .icon-wrapper {
    padding-bottom: 0.5rem;
  }

  .project-meta .icon-wrapper:last-child {
    padding-bottom: 1rem;
  }

  .icon {
    width: 24px;
    height: 24px;
  }

  .meta-item {
    font-size: calc(0.8 * var(--font-size-text));
  }

  .project-description {
    font-size: calc(0.8 * var(--font-size-text));
    display: -webkit-box;
    -webkit-line-clamp: 2;
    line-clamp: 2;
    -webkit-box-orient: vertical;
    line-height: 150%;
    overflow: hidden;
    padding-right: 1rem;
    margin-bottom: 1rem;
  }

  @media only screen and (max-width: 1200px) {
    /* .project-card {
    gap: 0;
  } */
  }
</style>
